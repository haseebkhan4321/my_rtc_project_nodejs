#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-rtc-project-node-js:server');
var http = require('http');
const {
  Socket
} = require('dgram');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Socket Logic Start.
 */
rooms = [];
io.on('connection', socket => {

  socket.on('open-room', (room_id, user_id) => {
    room = {};
    room['room_id'] = room_id;
    room['admin_id'] = user_id;
    room['users'] = [];
    if (rooms.find(room => room['room_id'] == room_id)) {
      console.log('already-exists')
      socket.emit('room-already-exists', room_id)
    } else {
      rooms.push(room);
      socket.join(room_id);
      socket.emit('room-opened', room);
    }
    console.log(room);
  });
  socket.on('join-room', (room_id, user_id) => {
    rooms.find(room => {
      user = {}
      user['user_id'] = user_id;
      console.log('join-room');
      if (room['room_id'] == room_id) {
        console.log('room exists');
        if (room['users'].length !== 0) {
          room['users'].find(user => {
            if (user['user_id'] == user_id && room['admin_id'] == user_id) {
              console.log('user already exists');
              socket.emit('user-already-exists', {
                user
              })
            } else {
              console.log('exists');
              room['users'].push(user);
              socket.join(room['room_id']);
              socket.to(room['room_id']).broadcast.emit('user-connected', {
                room,
                user
              })
            }
          })
        } else {
          console.log('empty');
          room['users'].push(user);
          socket.join(room['room_id']);
          socket.to(room['room_id']).broadcast.emit('user-connected', {
            room,
            user
          })
        }
      }
    });
  });



  // socket.on('join-room', (roomId, userId) => {
  //   console.log(roomId, userId);
  //   socket.join(roomId);
  //   socket.to(roomId).broadcast.emit('user-connected', userId);
  //   socket.on('disconnect', () => {
  //     socket.to(roomId).broadcast.emit('user-disconnected', userId);
  //   });
  // });
});

/**
 * Socket Logic End.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}